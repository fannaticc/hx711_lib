Version 3.2 HI-TECH Software Intermediate Code
[v F127 `(v ~T0 @X0 0 tf ]
[v F130 `(uc ~T0 @X0 0 tf ]
[v F133 `(uc ~T0 @X0 0 tf1`uc ]
[v F136 `(v ~T0 @X0 0 tf2`*v`ui ]
[v F140 `(v ~T0 @X0 0 tf2`*v`ui ]
[v F144 `(v ~T0 @X0 0 tf2`*v`ui ]
[v F148 `(v ~T0 @X0 0 tf1`uc ]
[v F151 `(uc ~T0 @X0 0 tf ]
[v F156 `(v ~T0 @X0 0 tf ]
[v F154 `(v ~T0 @X0 0 tf1`*F156 ]
[v F159 `(v ~T0 @X0 0 tf ]
"37 mcc_generated_files/drivers/spi_master.h
[s S2 `*F127 1 `*F130 1 `*F133 1 `*F136 1 `*F140 1 `*F144 1 `*F148 1 `*F151 1 `*F154 1 `*F159 1 ]
[n S2 . spiClose spiOpen exchangeByte exchangeBlock writeBlock readBlock writeByte readByte setSpiISR spiISR ]
[v F98 `(v ~T0 @X0 1 tf ]
"35 mcc_generated_files/drivers/../spi_driver.h
[v _spi_close `TF98 ~T0 @X0 0 e ]
[v F168 `(uc ~T0 @X0 1 tf ]
"29 mcc_generated_files/drivers/spi_master.c
[v _MASTER0_open `TF168 ~T0 @X0 0 e ]
"39 mcc_generated_files/drivers/../spi_driver.h
[v _spi_exchangeByte `(uc ~T0 @X0 0 ef1`uc ]
"41
[v _spi_exchangeBlock `(v ~T0 @X0 0 ef2`*v`ui ]
"42
[v _spi_writeBlock `(v ~T0 @X0 0 ef2`*v`ui ]
"43
[v _spi_readBlock `(v ~T0 @X0 0 ef2`*v`ui ]
"45
[v _spi_writeByte `(v ~T0 @X0 0 ef1`uc ]
"46
[v _spi_readByte `(uc ~T0 @X0 0 ef ]
[v F120 `(v ~T0 @X0 0 tf ]
"49
[v _spi_setSpiISR `(v ~T0 @X0 0 ef1`*F120 ]
"48
[v _spi_isr `(v ~T0 @X0 0 ef ]
"36 mcc_generated_files/drivers/spi_master.c
[c E92 0 1 .. ]
[n E92 . MASTER0_CONFIG SPI_DEFAULT  ]
"37 mcc_generated_files/drivers/../spi_driver.h
[v _spi_open `(uc ~T0 @X0 0 ef1`E92 ]
"40 mcc_generated_files/drivers/spi_master.c
[c E122 0 .. ]
[n E122 . MASTER0  ]
[; ;stdint.h: 13: typedef signed char int8_t;
[; ;stdint.h: 20: typedef signed int int16_t;
[; ;stdint.h: 28: typedef __int24 int24_t;
[; ;stdint.h: 36: typedef signed long int int32_t;
[; ;stdint.h: 52: typedef unsigned char uint8_t;
[; ;stdint.h: 58: typedef unsigned int uint16_t;
[; ;stdint.h: 65: typedef __uint24 uint24_t;
[; ;stdint.h: 72: typedef unsigned long int uint32_t;
[; ;stdint.h: 88: typedef signed char int_least8_t;
[; ;stdint.h: 96: typedef signed int int_least16_t;
[; ;stdint.h: 109: typedef __int24 int_least24_t;
[; ;stdint.h: 118: typedef signed long int int_least32_t;
[; ;stdint.h: 136: typedef unsigned char uint_least8_t;
[; ;stdint.h: 143: typedef unsigned int uint_least16_t;
[; ;stdint.h: 154: typedef __uint24 uint_least24_t;
[; ;stdint.h: 162: typedef unsigned long int uint_least32_t;
[; ;stdint.h: 181: typedef signed char int_fast8_t;
[; ;stdint.h: 188: typedef signed int int_fast16_t;
[; ;stdint.h: 200: typedef __int24 int_fast24_t;
[; ;stdint.h: 208: typedef signed long int int_fast32_t;
[; ;stdint.h: 224: typedef unsigned char uint_fast8_t;
[; ;stdint.h: 230: typedef unsigned int uint_fast16_t;
[; ;stdint.h: 240: typedef __uint24 uint_fast24_t;
[; ;stdint.h: 247: typedef unsigned long int uint_fast32_t;
[; ;stdint.h: 268: typedef int32_t intmax_t;
[; ;stdint.h: 282: typedef uint32_t uintmax_t;
[; ;stdint.h: 289: typedef int16_t intptr_t;
[; ;stdint.h: 294: typedef uint16_t uintptr_t;
[; ;stdbool.h: 15: typedef unsigned char bool;
[; ;__size_t.h: 4: typedef unsigned size_t;
[; ;stdarg.h: 7: typedef void * va_list[1];
[; ;stdarg.h: 10: extern void * __va_start(void);
[; ;stdarg.h: 13: extern void * __va_arg(void *, ...);
[; ;stdio.h: 43: struct __prbuf
[; ;stdio.h: 44: {
[; ;stdio.h: 45: char * ptr;
[; ;stdio.h: 46: void (* func)(char);
[; ;stdio.h: 47: };
[; ;errno.h: 29: extern int errno;
[; ;conio.h: 12: extern void init_uart(void);
[; ;conio.h: 14: extern char getch(void);
[; ;conio.h: 15: extern char getche(void);
[; ;conio.h: 16: extern void putch(char);
[; ;conio.h: 17: extern void ungetch(char);
[; ;conio.h: 19: extern __bit kbhit(void);
[; ;conio.h: 23: extern char * cgets(char *);
[; ;conio.h: 24: extern void cputs(const char *);
[; ;stdio.h: 88: extern int cprintf(char *, ...);
[; ;stdio.h: 93: extern int _doprnt(struct __prbuf *, const register char *, register va_list);
[; ;stdio.h: 183: extern char * gets(char *);
[; ;stdio.h: 184: extern int puts(const char *);
[; ;stdio.h: 185: extern int scanf(const char *, ...) __attribute__((unsupported("scanf() is not supported by this compiler")));
[; ;stdio.h: 186: extern int sscanf(const char *, const char *, ...) __attribute__((unsupported("sscanf() is not supported by this compiler")));
[; ;stdio.h: 187: extern int vprintf(const char *, va_list) __attribute__((unsupported("vprintf() is not supported by this compiler")));
[; ;stdio.h: 188: extern int vsprintf(char *, const char *, va_list) __attribute__((unsupported("vsprintf() is not supported by this compiler")));
[; ;stdio.h: 189: extern int vscanf(const char *, va_list ap) __attribute__((unsupported("vscanf() is not supported by this compiler")));
[; ;stdio.h: 190: extern int vsscanf(const char *, const char *, va_list) __attribute__((unsupported("vsscanf() is not supported by this compiler")));
[; ;stdio.h: 194: extern int sprintf(char *, const char *, ...);
[; ;stdio.h: 195: extern int printf(const char *, ...);
[; ;stdbool.h: 15: typedef unsigned char bool;
[; ;spi_types.h: 27: typedef enum {
[; ;spi_types.h: 28: MASTER0_CONFIG,
[; ;spi_types.h: 29: SPI_DEFAULT
[; ;spi_types.h: 30: } spi_modes;
[; ;spi_driver.h: 35: inline void spi_close(void);
[; ;spi_driver.h: 37: bool spi_open(spi_modes spiUniqueConfiguration);
[; ;spi_driver.h: 39: uint8_t spi_exchangeByte(uint8_t b);
[; ;spi_driver.h: 41: void spi_exchangeBlock(void *block, size_t blockSize);
[; ;spi_driver.h: 42: void spi_writeBlock(void *block, size_t blockSize);
[; ;spi_driver.h: 43: void spi_readBlock(void *block, size_t blockSize);
[; ;spi_driver.h: 45: void spi_writeByte(uint8_t byte);
[; ;spi_driver.h: 46: uint8_t spi_readByte(void);
[; ;spi_driver.h: 48: void spi_isr(void);
[; ;spi_driver.h: 49: void spi_setSpiISR(void(*handler)(void));
[; ;spi_master.h: 33: typedef enum {
[; ;spi_master.h: 34: MASTER0
[; ;spi_master.h: 35: } spi_master_configurations_t;
[; ;spi_master.h: 37: typedef struct { void (*spiClose)(void);
[; ;spi_master.h: 38: bool (*spiOpen)(void);
[; ;spi_master.h: 39: uint8_t (*exchangeByte)(uint8_t b);
[; ;spi_master.h: 40: void (*exchangeBlock)(void * block, size_t blockSize);
[; ;spi_master.h: 41: void (*writeBlock)(void * block, size_t blockSize);
[; ;spi_master.h: 42: void (*readBlock)(void * block, size_t blockSize);
[; ;spi_master.h: 43: void (*writeByte)(uint8_t byte);
[; ;spi_master.h: 44: uint8_t (*readByte)(void);
[; ;spi_master.h: 45: void (*setSpiISR)(void(*handler)(void));
[; ;spi_master.h: 46: void (*spiISR)(void);
[; ;spi_master.h: 47: } spi_master_functions_t;
[; ;spi_master.h: 49: extern const spi_master_functions_t spiMaster[];
[; ;spi_master.h: 51: inline bool spi_master_open(spi_master_configurations_t config);
[; ;spi_master.c: 29: inline bool MASTER0_open(void);
"31 mcc_generated_files/drivers/spi_master.c
[v _spiMaster `CS2 ~T0 @X0 -> 0 `x e ]
[i _spiMaster
:U ..
:U ..
"32
-> &U _spi_close `*F127
-> &U _MASTER0_open `*F130
&U _spi_exchangeByte
&U _spi_exchangeBlock
&U _spi_writeBlock
&U _spi_readBlock
&U _spi_writeByte
&U _spi_readByte
&U _spi_setSpiISR
&U _spi_isr
..
..
]
[; ;spi_master.c: 31: const spi_master_functions_t spiMaster[] = {
[; ;spi_master.c: 32: { spi_close, MASTER0_open, spi_exchangeByte, spi_exchangeBlock, spi_writeBlock, spi_readBlock, spi_writeByte, spi_readByte, spi_setSpiISR, spi_isr }
[; ;spi_master.c: 33: };
"35
[v _MASTER0_open `TF168 ~T0 @X0 1 e ]
{
[; ;spi_master.c: 35: inline bool MASTER0_open(void){
[e :U _MASTER0_open ]
[f ]
[; ;spi_master.c: 36: return spi_open(MASTER0_CONFIG);
"36
[e ) ( _spi_open (1 . `E92 0 ]
[e $UE 3  ]
[; ;spi_master.c: 37: }
"37
[e :UE 3 ]
}
[v F165 `(uc ~T0 @X0 1 tf1`E122 ]
"40
[v _spi_master_open `TF165 ~T0 @X0 1 e ]
{
[; ;spi_master.c: 40: inline bool spi_master_open(spi_master_configurations_t config){
[e :U _spi_master_open ]
[v _config `E122 ~T0 @X0 1 r1 ]
[f ]
[; ;spi_master.c: 41: switch(config){
"41
[e $U 6  ]
{
[; ;spi_master.c: 42: case MASTER0:
"42
[e :U 7 ]
[; ;spi_master.c: 43: return MASTER0_open();
"43
[e ) ( _MASTER0_open ..  ]
[e $UE 4  ]
[; ;spi_master.c: 44: default:
"44
[e :U 8 ]
[; ;spi_master.c: 45: return 0;
"45
[e ) -> -> 0 `i `uc ]
[e $UE 4  ]
"46
}
[; ;spi_master.c: 46: }
[e $U 5  ]
"41
[e :U 6 ]
[e [\ _config , $ . `E122 0 7
 8 ]
"46
[e :U 5 ]
[; ;spi_master.c: 47: }
"47
[e :UE 4 ]
}
